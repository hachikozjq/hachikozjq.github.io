[{"id":"855d228ba0384bba0ec97c43bd96d618","title":"Mac必装软件","content":"Mac必装软件准备工作：如果出现连接443的情况下，可以上https://ipaddress.com查询ip，然后修改hosts文件ip domain的格式\nbrew镜像安装脚本：/usr/bin/ruby -e &quot;$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)&quot;\nbrew的一些命令：\nbrew install 软件@版本，安装软件，不带版本即最新版本\nbrew uninstall 软件，卸载软件\nbrew serviecs start|stop|restart 软件，软件的服务启动、停止、重启\nbrew info 软件，查看软件信息，包括安装目录\nbrew update，更新homebrew\nbrew upgrade 软件，更新已安装软件\n\nsdkman安装：curl -s &quot;https://get.sdkman.io&quot; | bash\nsdk的一些操作命令参考\niTerm2+Oh My Zsh：准备：前者官方下载即可，后者执行命令 $ sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;查看shells：cat /etc/shells切换shells：chsh -s /bin/zsh其他配置可以见博客\n安装powerline：先安装pip，sudo easy_install pip，如果报错，尝试下面方法：\n\ncurl &#39;https://bootstrap.pypa.io/get-pip.py&#39; &gt; get-pip.py\nsudo python3 get-pip.py\npip --version查看安装版本\n\n现在可以安装powerline了，pip install powerline-status\n安装powerfonts：\ngit clone https://github.com/powerline/fonts.git --depth=1\ncd fonts\n./install.sh\ncd ..\nrm -rf fonts\n\n删除mac自带的ABC输入法：参考\n参考链接\n","slug":"运维/Mac必装软件","date":"2022-03-05T10:35:54.000Z","categories_index":"运维","tags_index":"软件,Mac","author_index":"Hachiko_JQ"},{"id":"e64ccaddd5bd6fb47aae132e76880912","title":"local介绍","content":"介绍\n用到的开源框架：微服务：SpringBoot 2.3.2.RELEASE+SpringCloudAlibaba 2.2.6.RELEASE+Dubbo 2.7.8+Nacos 2.0.3限流哨兵：Sentinel 1.8.3分布式调度任务：xxl-job 2.3.0分布式任务：seata 1.4.2\nNocos：u：nacos，p：nacos\n配置中心：\nNameSpace，命名空间public，微服务的配置seata，存放seata的规则sentinel，存放限流的规则\n\n我们只关心public命名空间\n\nglobal-web.yml，global-center.yml，global-gateway.yml三者可以不用关心，是作为全局的配置，具体可以点详情进去，每项配置有说明e.g.\n# sentinel\nspring:\n  cloud:\n    sentinel:\n      # 取消Sentinel控制台懒加载\n      eager: true\n      # 限流规则持久化保存到nacos数据库中，可以实现服务重启后不丢失规则\n      datasource:\n       # 流控规则\n        flow:\n          nacos:\n            # 注册地址\n            server-addr: $&#123;spring.cloud.nacos.config.server-addr&#125;\n            # 配置组，默认sentinel的组\n            group-id: SENTINEL_GROUP\n            # 限流类型：流控\n            rule-type: flow\n            # 配置的dataId\n            data-id: $&#123;spring.application.name&#125;-flow-rules\n            # 配置的格式，json\n            data-type: json\n            # 配置中心的命名空间，默认sentinel\n            namespace: sentinel\n        # 熔断规则\n        degrade:\n          nacos:\n            server-addr: $&#123;spring.cloud.nacos.config.server-addr&#125;\n            group-id: SENTINEL_GROUP\n            rule-type: degrade\n            data-id: $&#123;spring.application.name&#125;-degrade-rules\n            data-type: json\n            namespace: sentinel\n        # 系统规则\n        system:\n          nacos:\n            server-addr: $&#123;spring.cloud.nacos.config.server-addr&#125;\n            group-id: SENTINEL_GROUP\n            rule-type: system\n            data-id: $&#123;spring.application.name&#125;-system-rules\n            data-type: json\n            namespace: sentinel\n        # 授权规则\n        authority:\n          nacos:\n            server-addr: $&#123;spring.cloud.nacos.config.server-addr&#125;\n            group-id: SENTINEL_GROUP\n            rule-type: authority\n            data-id: $&#123;spring.application.name&#125;-authority-rules\n            data-type: json\n            namespace: sentinel\n        # 热点规则\n        param-flow:\n          nacos:\n            server-addr: $&#123;spring.cloud.nacos.config.server-addr&#125;\n            group-id: SENTINEL_GROUP\n            rule-type: param-flow\n            data-id: $&#123;spring.application.name&#125;-param-rules\n            data-type: json\n            namespace: sentinel\n# dubbo\ndubbo:\n  consumer:\n    # 启动不检测dubbo的健康，防止center没启，导致web也启不起来\n    check: false\n  cloud:\n    # 消费者订阅的提供者appName，在具体web项目里的application.yml里配置，这里不动\n    subscribed-services: $&#123;provider.application.name&#125;\n  registry:\n    # dubbo注册地址\n    address: spring-cloud://$&#123;spring.cloud.nacos.discovery.ip&#125;\n  protocol:\n    name: dubbo\n    # 上公司环境后改为-1\n    # dubbo随机端口\n    port: -1\n# endpoints\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        # 这个不多说，提供了endpoints的接口\n        include:\n          - hessian2Redis\n          - health\n          - info\n# seata\nseata:\n  # 开启分布式事务\n  enabled: true\n  # 服务名\n  application-id: $&#123;spring.application.name&#125;\n  # 分布式事务组\n  tx-service-group: project_local\n  service:\n    vgroup-mapping:\n      project_local: default\n  # 集成nacos的配置中心\n  config:\n    type: nacos\n    nacos:\n      # 配置命名空间\n      namespace: seata\n      # 注册中心地址\n      server-addr: $&#123;spring.cloud.nacos.discovery.server-addr&#125;\n      # 配置中心组，默认SEATA组\n      group: SEATA_GROUP\n      # 配置的dataId\n      data-id: seataServer.properties\n  # 将seata注册到nacos\n  registry:\n    type: nacos\n    nacos:\n      group: SEATA_GROUP\n      server-addr: $&#123;spring.cloud.nacos.discovery.server-addr&#125;\n      application: seata-server\n      cluster: default\n      namespace: seata\n\ngoods-center.yml，user-center.yml，goods-web.yml具体微服务的配置文件，主要存放一些各自服务的配置，如数据源等。\n\n\n\n\nsentinel限流：u：sentinel，p：sentinel\n\n第一种可以在簇点链路中，直接找到对应的请求，加上各种类型的限流\n\n\n\n第二种可以在左侧列表中，直接加对应的流控规则，具体的选项看看官网吧，资源名一般我们都用url地址\n\n\n\n第三种查看实时监控，如上配置了1秒qps的限流，下图中可以反映出每秒通过的数量就是1\n\n\nxxl-job：u：admin，p：123456\n看官方文档，很详细了，可以直接登录\nseata：待\n相关db初始化文件：go\n","slug":"JAVA/local介绍","date":"2022-03-03T10:37:06.000Z","categories_index":"JAVA","tags_index":"JAVA","author_index":"Hachiko_JQ"},{"id":"fd270390fcc2a51eddfa94a5e97c1100","title":"Jetbrains系列产品重置试用方法","content":"注：本文转载于zhi神zhile\n没错，jetbrains-agent这个项目停止了。市面上漫天飞的各种最新都是其他大神的魔改版本。[&#x2F;斜眼]我不是要专门写个博文来说明jetbrains-agent项目已经停止，然后缅怀感叹一番。这篇文章是想和大家聊聊另一种思路。\n本项目已过时，自2021.2.3开始不再推荐使用。请支持正版！\n0x0. 项目背景Jetbrains家的产品有一个很良心的地方，他会允许你试用30天（这个数字写死在代码里了）以评估是否你真的需要为它而付费。但很多时候会出现一种情况：IDE并不能按照我们实际的试用时间来计算。我举个例子：如果我们开始了试用，然后媳妇生孩子要你回去陪产！陪产时我们并无空闲对IDE试用评估，它依旧算试用时间。（只是举个例子，或许你并没有女朋友）发现了吗？你未能真的有30天来对它进行全面的试用评估，你甚至无法作出是否付费的决定。此时你会想要延长试用时间，然而Jetbrains并未提供相关功能，该怎么办？\n事实上有一款插件可以实现这个功能，你或许可以用它来重置一下试用时间。但切记不要无休止的一直试用，这并不是这个插件的本意！\n0x1. 如何安装1). 插件市场安装：\n在Settings/Preferences... -&gt; Plugins 内手动添加第三方插件仓库地址：https://plugins.zhile.io\n搜索：IDE Eval Reset插件进行安装。如果搜索不到请注意是否做好了上一步？网络是否通畅？\n插件会提示安装成功。\n\n2). 下载安装：\n点击这个链接(v2.3.5)下载插件的zip包（macOS可能会自动解压，然后把zip包丢进回收站）\n通常可以直接把zip包拖进IDE的窗口来进行插件的安装。如果无法拖动安装，你可以在Settings/Preferences... -&gt; Plugins 里手动安装插件（Install Plugin From Disk...）\n插件会提示安装成功。\n\n0x2. 如何使用\n一般来说，在IDE窗口切出去或切回来时（窗口失去&#x2F;得到焦点）会触发事件，检测是否长时间（25天）没有重置，给通知让你选择。（初次安装因为无法获取上次重置时间，会直接给予提示）\n也可以手动唤出插件的主界面：\n如果IDE没有打开项目，在Welcome界面点击菜单：Get Help -&gt; Eval Reset\n如果IDE打开了项目，点击菜单：Help -&gt; Eval Reset\n\n\n唤出的插件主界面中包含了一些显示信息，2个按钮，1个勾选项：\n按钮：Reload 用来刷新界面上的显示信息。\n按钮：Reset 点击会询问是否重置试用信息并重启IDE。选择Yes则执行重置操作并重启IDE生效，选择No则什么也不做。（此为手动重置方式）\n勾选项：Auto reset before per restart 如果勾选了，则自勾选后每次重启&#x2F;退出IDE时会自动重置试用信息，你无需做额外的事情。（此为自动重置方式）\n\n\n如果你的IDE已经过了试用打不开，可以运行这个临时重置脚本（注意选择对应系统版本），它可以让你暂时进入IDE进行上述操作。（登录试用版本不适用，见下文）\n\n0x3. 如何更新1). 插件更新机制（推荐）：\nIDE会自行检测其自身和所安装插件的更新并给予提示。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。\n点击IDE的Check for Updates... 菜单手动检测IDE和所安装插件的更新。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。\n插件更新可能会需要重启IDE。\n\n2). 手动更新：\n从本页面下载最新的插件zip包安装更新。参考本文：下载安装小节。\n插件更新需要重启IDE。\n\n0x4. 一些说明\n本插件默认不会显示其主界面，如果你需要，参考本文：如何使用小节。\n\n市场付费插件的试用信息也会一并重置。\n\nMyBatisCodeHelperPro插件有两个版本如下，功能完全相同，安装时须看清楚！\n\nMyBatisCodeHelperPro (Marketplace Edition)，可重置！\nMyBatisCodeHelperPro，不可重置！\n\n\n对于某些付费插件（如: Iedis 2, MinBatis）来说，你可能需要去取掉javaagent配置（如果有）后重启IDE：\n\n如果IDE没有打开项目，在Welcome界面点击菜单：Configure -&gt; Edit Custom VM Options... -&gt; 移除 -javaagent: 开头的行。\n如果IDE打开了项目，点击菜单：Help -&gt; Edit Custom VM Options... -&gt; 移除 -javaagent: 开头的行。\n\n\n重置需要重启IDE生效！\n\n重置后并不弹出Licenses对话框让你选择输入License或试用，这和之前的重置脚本&#x2F;插件不同（省去这烦人的一步）。\n\n如果长达25天不曾有任何重置动作，IDE会有通知询问你是否进行重置。\n\n如果勾选：Auto reset before per restart ，重置是静默无感知的。\n\n简单来说：勾选了Auto reset before per restart则无需再管，一劳永逸。\n\n\n0x5. 新试用机制\n最新的IDE试用需要登录，我们可以任选以下方式中的一种来继续使用重置插件：\n使用网络上热心大佬收集总结的key，进入IDE后使用重置插件。\n登录账号试用IDE，安装设置好本插件，退出登录账号重启IDE即可。\n先安装旧版本IDE，安装设置好本插件，升级IDE到最新版本即可。\n\n\n不管哪种方法原理都是为了让你进入IDE，以便重置插件接管试用。\n2021.3已经彻底不支持离线试用，本重置插件已失效。可以考虑暂缓升级至2021.3！\n\n0x6. 开源信息\n插件是学习研究项目，源代码是开放的。源码仓库地址：Gitee。\n如果你有更好的想法，欢迎给我提Pull Request来共同研究完善。\n插件源码使用：GPL-2.0开源协议发布。\n插件使用PHP编写，毕竟PHP是世界上最好的编程语言！\n\n0x7. 支持的产品\nIntelliJ IDEA\nAppCode\nCLion\nDataGrip\nGoLand\nPhpStorm\nPyCharm\nRider\nRubyMine\nWebStorm\n\n","slug":"运维/Jetbrains系列产品重置试用方法","date":"2022-02-22T14:04:09.000Z","categories_index":"运维","tags_index":"Idea","author_index":"Hachiko_JQ"},{"id":"2d7ed058cbb731faae14353326cf521a","title":"MySQL深分页解决","content":"今天在工作中碰到了MySQL深分页的问题，场景为每页大小50，查到70W后的页面试就会超时3s以上，查询慢SQL发现，是最基础的一条limit语句导致，且几乎可以忽略查询条件，执行计划发现Using where，很显然几百万的数据进行了回表查询，于是从这个问题切入，怎么能让它不进行回表？已知如果查询字段仅为主键的话，那就不会进行回表了，因此大致思路为：\n\n第一步：先查出主键\n第二步：通过in主键的方法，查询该页的数据\n\n简单来说就是一条语句拆分成两条语句，来解决回表问题，经测试并上线后，MySQL深分页就此解决。\n","slug":"数据库/MySQL深分页解决","date":"2022-02-21T07:10:51.000Z","categories_index":"运维","tags_index":"MySQL","author_index":"Hachiko_JQ"},{"id":"973d1c20dd427247706c6876cb3e03ea","title":"Mac下Alfred的安装","content":"附件：Alfred 4.6.2.dmg，提取码：6q11，或者Xclient下载最新破解的也可以。\n权限问题：sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;\n安装插件：npm install -g @bchatard/alfred-jetbrains\n卸载：npm uninstall -g @bchatard/alfred-jetbrains\nrm -rf /usr/local/lib/node_modules/@bchatard/alfred-jetbrains\nidea生成脚本：Tools-create launch-&#x2F;usr&#x2F;local&#x2F;bin&#x2F;idea\n\n\n\n\n\n\n提示\nnode的版本不能太低。\n\n\n","slug":"运维/Mac下Alfred的安装","date":"2022-02-18T09:44:55.000Z","categories_index":"运维","tags_index":"软件","author_index":"Hachiko_JQ"},{"id":"46abc2bc8d0eaea60a40342643c46cef","title":"clash拒绝连接github","content":"新增git代理：git config –global http.proxy http://127.0.0.1:7890git config –global https.proxy http://127.0.0.1:7890\n取消代理：git config –global –unset http.proxygit config –global –unset https.proxy\n","slug":"运维/clash拒绝连接github","date":"2022-02-18T09:36:13.000Z","categories_index":"运维","tags_index":"软件","author_index":"Hachiko_JQ"},{"id":"31297129f10fe13edd145edb92f18f0c","title":"初来乍到","content":"初来乍到2022年02月18日\n","slug":"初来乍到","date":"2022-02-18T05:06:23.000Z","categories_index":"生活","tags_index":"生活","author_index":"Hachiko_JQ"}]